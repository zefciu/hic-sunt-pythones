\documentclass{beamer}

\mode<presentation>
{
  \usetheme{Warsaw}
  % \setbeamercovered{transparent}
}


\usepackage[utf8]{inputenc}
\usepackage{polski}

% \usepackage{times}

% For pygmentize
\usepackage{fancyvrb}
\usepackage{color}

\input{styles}


\title[Hic sunt pythones]
{Hic sunt pythones --- metaprogramowanie w Pythonie}

\author[]{Szymon Pyżalski}

\institute{STX Next}

\date {PyConPL 2011}

% \AtBeginSubsection[]
% {
%   \begin{frame}<beamer>{Outline}
%     \tableofcontents[currentsection,currentsubsection]
%   \end{frame}
% }


% If you wish to uncover everything in a step-wise fashion, uncomment
% the following command: 

%\beamerdefaultoverlayspecification{<+->}


\begin{document}

\begin{frame}
  \titlepage
\end{frame}

\begin{frame}{Outline}
  \tableofcontents
  %\pausesections
\end{frame}


% Since this a solution template for a generic talk, very little can
% be said about how it should be structured. However, the talk length
% of between 15min and 45min and the theme suggest that you stick to
% the following rules:  

% - Exactly two or three sections (other than the summary).
% - At *most* three subsections per section.
% - Talk about 30s to 2min per frame. So there should be between about
%   15 and 30 frames, all told.


\section{Co chcemy osiągnąć}

\begin{frame}{Nasze cele}

  Chcemy stworzyć obiekt, który:
  \begin{itemize}
  \item
    Będzie sprawdzać typy wartości przypisywanych polom.
    \pause
  \item
    Będzie wersjonować zapisane dane.
  \end{itemize}
\end{frame}

\begin{frame}{Przykład użycia}
\small{
\input{usage1}
}
\end{frame}

\begin{frame}{Przykład użycia c. d.}
\input{usage2}
\end{frame}


\section{Deskryptory}

\begin{frame}{Czym jest deskryptor?}
  \begin{itemize}
    \item
      Należy do \emph{klasy}. Ale jego metody otrzymają obiekt jako parametr.
      \pause
    \item{}
      Musi definiować metodę \Verb|\_\_get\_\_()|.
      \pause
    \item
      Może definiować metody \Verb|\_\_set\_\_()| i \Verb|\_\_delete\_\_()|.
  \end{itemize}
\end{frame}

\begin{frame}{Dwa rodzaje deskryptorów}
  \begin{description}
    \item[non-data descriptor]
    Definiuje metodę \Verb|\_\_get\_\_()|. Ma priorytet niższy niż wartość
    zapisana w \Verb|\_\_dict\_\_| obiektu.
    \pause
      
    \item[data descriptor]
    Definiuje także metodę \Verb|\_\_set\_\_()|. Ma priorytet wyższy niż wartość
    zapisana w \Verb|\_\_dict\_\_| obiektu.
    \pause
  \end{description}
\end{frame}

\begin{frame}{Już znamy...}
  \begin{itemize}
    \item
    Funkcje są deskryptorami. (\Verb|self| i ukrywanie metod)
    \pause
    \item
    Podanie \Verb|\_\_slots\_\_| dla klasy tworzy kilka deskryptorów.
    \pause
    \item
    Proste generowanie deskryptorów (data!) przez \Verb|@property|
  \end{itemize}
\end{frame}

\begin{frame}{Implementacja deskryptora}
  \tiny{\input{descr1}}
\end{frame}

\begin{frame}{Implementacja deskryptora c. d.}
  \tiny{\input{descr2}}
\end{frame}

\begin{frame}{Implementacja wersjonowania}
  \tiny{\input{versionable}}
\end{frame}

\section{Metaklasy}

\begin{frame}{Problem}
  \tiny{\input{problem}}
\end{frame}

\begin{frame}{Czym jest metaklasa}
   \begin{itemize}
   \item
     Metaklasa to klasa, której instancją są klasy.
     \pause
   \item
     Większość klas ,,\emph{new-style}'' jest instancjami metaklasy \Verb|type|.
     \pause
   \item
     Inne metaklasy dziedziczą z tego typu.
   \end{itemize}
\end{frame}

\begin{frame}{Po co?}
   \begin{itemize}
   \item
     Wartości klasy możemy ustawić przy definicji
     \pause
   \item
     Metody klasy możemy dodać dzięki dekoratorowi \Verb|@classmethod|
     \pause
   \item
     Inicjalizacja klasy
   \end{itemize}
\end{frame}

\begin{frame}{Inicjalizacja klasy}
  \tiny{\input{meta_expl}}
\end{frame}

\begin{frame}{Nasza metaklasa}
  \tiny{\input{meta}}
\end{frame}


\end{document}

